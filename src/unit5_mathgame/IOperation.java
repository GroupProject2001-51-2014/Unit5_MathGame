
package unit5_mathgame;

import java.util.concurrent.ConcurrentHashMap;

/**
 * Interface defines the contract for the Math Game
 * <p/>
 * Revision History:<br/>
 * Name: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Change:<br/>
 * ------------------  -------------   ---------<br/>
 *
 * @author John Mambo <john.mambo@gmail.com>
 * @param <T> Template type parameter with {@code Double} upper bound  
 * @param <U> Template type parameter with {@code String} upper bound
 */
public interface IOperation<T extends Double, U extends String> {
    
    /**
     * Enumerable Level defines the level of difficulty for the Math Game 
     */
    public enum Level{
        EASY(1),
        MODERATE(2),
        HARD(3),
        GENIUS(4);
        
        private final int val;
        
        private Level(int val){
            this.val = val;
        }
        
        /**
         * This method returns the Ordinal position of the Level enumerable value property.
         * @return {@code int} Corresponding ordinal position of the Level enumerable property. 
         */
        public int index(){
            return val;
        }
    };
    
    /**
     * The Operation enumerable defines all the possible mathematical operations that
     * the application can handle.
     */
    public enum Operation{
        ADD(1),
        SUBTRACT(2),
        MULTIPLY(3),
        DIVIDE(4);
        
        private final int val;
        
        private Operation(int val){
            this.val = val;
        }
        
        /**
         * This method returns the Ordinal position of the Operation enumerable value property.
         * @return {@code int} Corresponding ordinal position of the Operation enumerable property. 
         */
        public int index(){
            return val;
        }
    };
    
    /**
     * The DefineValue enumerable provides a predefined set of values that will be set by the Math Game
     */
    public enum DefineValue{
      ANSWER(0),
      UPPERLIMIT(1),
      LOWERLIMIT(2),
      FIRSTVALUE(3),
      SECONDVALUE(4);
      
      private final int val;
      
      private DefineValue(int val){
          this.val = val;
      }
      
      /**
         * This method returns the Ordinal position of the DefineValue enumerable value property.
         * @return {@code int} Corresponding ordinal position of the DefineValue enumerable property. 
         */
      public int index(){
            return val;
        }
    };
    
    /**
     * Sets the boundary values for the Math Game:<br/>&nbsp; {@code DefineValue.UPPERLIMIT} and {@code DefineValue.LOWERLIMIT}
     * @param level level of difficulty.
     * @param operation the mathematical operation to be used.
     */
    public void range(Level level, Operation operation);

    /**
     * Generates a pair of values:<br/>&nbsp; {@code DefineValue.FIRSTVALUE} and {@code DefineValue.SECONDVALUE} 
     */
    public void generateValuePair();
    
    /**
     * Calculates the results based on the values generated by {@code generateValuePair()}:<br/>&nbsp; {@code DefineValue.FIRSTVALUE} and {@code DefineValue.SECONDVALUE}<br/>
     * and puts the results in {@code DefineValue.ANSWER}
     */
    public void result();
    
    /**
     * Checks if the {@code input} parameter value provide matches the expected {@code DefineValue.ANSWER}
     * @param input is the user input of their answer to the question presented.
     * @return {@code true} if the input value is correct<br/>
     * {@code false} if the input value is incorrect
     */
    public boolean isCorrect(T input);
    
    /**
     * Provides an appropriate response to keep the user engaged.
     * @param isCorrect is the user input correct?
     * @return type of <b>U</> class which contains the response message.
     */
    public U response(boolean isCorrect);
    
    /**
     * Gets all the parameter values used in the Math Game 
     * @return {@code ConcurrentHashMap<IOperation.DefineValue, T>} which contains all the parameters used in the Math Game Calculation
     */
    public ConcurrentHashMap<DefineValue, T> getConcurrentHashMap();
    
    /**
     * Plays a sound to keep the user engaged and encouraged to continue with playing the Math Game.
     * @param isCorrect is the user input correct?
     */
    public void playResponse(boolean isCorrect);
}
